{
  "author": {
    "name": "basarat"
  },
  "name": "grunt-ts",
  "description": "Compile and manage your TypeScript project",
  "version": "1.6.4",
  "homepage": "https://github.com/basarat/grunt-ts",
  "repository": {
    "type": "git",
    "url": "git@github.com:basarat/grunt-ts.git"
  },
  "bugs": {
    "url": "https://github.com/basarat/grunt-ts/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/basarat/grunt-ts/blob/master/LICENSE"
    }
  ],
  "main": "grunt.js",
  "maintainers": [
    {
      "name": "basarat",
      "email": "basaratali@gmail.com"
    },
    {
      "name": "jeffmay",
      "email": "viralidealogue@gmail.com"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "dependencies": {
    "typescript": "0.9.5",
    "chokidar": "0.6.2",
    "shelljs": "0.1.4",
    "underscore": "1.5.1",
    "underscore.string": "2.3.3"
  },
  "peerDependencies": {
    "grunt": "~0.4.0"
  },
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-clean": "~0.4.0",
    "grunt-contrib-watch": "~0.5.1",
    "grunt-contrib-nodeunit": "~0.1.2"
  },
  "optionalDependencies": {},
  "keywords": [
    "gruntplugin",
    "typescript"
  ],
  "contributors": [
    {
      "name": "Basarat Ali Syed",
      "email": "basaratali@gmail.com",
      "url": "http://www.basarat.com"
    },
    {
      "name": "Jeff May",
      "email": "viralidealogue@gmail.com",
      "url": "https://github.com/jeffmay"
    }
  ],
  "readme": "grunt-ts\r\n================\r\nWritten from scratch TypeScript compiler task for GruntJS. \r\nIt differs from grunt-typescript which is another excellent [grunt plugin for typescript](https://npmjs.org/package/grunt-typescript).\r\n\r\nFollowing are the reasons why it was created. \r\n\r\n- This is written in [TypeScript](https://github.com/basarat/grunt-ts/blob/master/tasks/ts.ts)\r\n- Gives a typescript development workflow in addition to simple file compilation. \r\n- Super simple to update to the [latest version of the typescript](https://github.com/basarat/grunt-ts/commit/ffede564f2b20bc4dc207cb1a30dc57db7c44fe5)\r\n\r\nCheck how it can help streamline your front end development : [Sample usage with AngularJS](http://www.youtube.com/watch?v=0-6vT7xgE4Y&hd=1)\r\n\r\nAdditional / longer / more basic video tutorial : http://youtu.be/Km0DpfX5ZxM\r\n\r\n*If you know Grunt. Here is a quickstart full featured [Gruntfile](https://github.com/basarat/grunt-ts/blob/master/sample/Gruntfile.js)*\r\n\r\nFollowing are some key features: \r\n======================\r\n\r\n###Compiler support \r\nSupports the following compiler flags in both original format and camelCase (preferred):\r\n\r\n    --allowBool                   Allow 'bool' as a synonym for 'boolean'.\r\n    --allowImportModule           Allow 'module(...)' as a synonym for 'require(...)'.\r\n    --declaration                 Generates corresponding .d.ts file\r\n    --mapRoot LOCATION            Specifies the location where debugger should locate map files instead of generated locations.\r\n    --module KIND                 Specify module code generation: \"commonjs\" or \"amd\" (grunt-ts default)\r\n    --noImplicitAny               Warn on expressions and declarations with an implied 'any' type.\r\n    --noResolve                   Skip resolution and preprocessing\r\n    --removeComments              Do not emit comments to output (grunt-ts default)\r\n    --sourceMap                   Generates corresponding .map file (grunt-ts default)\r\n    --sourceRoot LOCATION         Specifies the location where debugger should locate TypeScript files instead of source locations.\r\n    --target VERSION              Specify ECMAScript target version: \"ES3\" (tsc default), or \"ES5\" (grunt-ts default)\r\n\r\nCan also do js *file concatenation* using `--out`. Additionally supports an output directory for the generated\r\njavascript using `--outDir` flag. \r\nFor file ordering look at Javascript Generation below. \r\n\r\n\r\n###Reference file generation \r\nCan generate a reference.ts file for you which contains a reference to all your ts files.\r\nThis means you never need to cross reference files manually. Just reference `reference.ts` :) \r\n\r\n\r\n####Javascript generation and ordering\r\nAlso if you specify both an out js file via `out` && a reference file via `reference` \r\nit uses the generated reference file to *order the code in the generated javascript*. \r\n\r\nIn your `reference.ts` file you can specify the order for the few files you care about\r\nand leave the rest to be maintained by grunt-ts. \r\nE.g. in the following case the generated javascript for `someBaseClass.ts` is guaranteed to be at the top,\r\nand the generated javascript for  `main.ts`is guaranteed to be at the bottom of the single merged js file. \r\nEverything between `grunt-start` and `grunt-end` is generated and maintained\r\nfor you. If there is no `grunt-start` section found, it is created for you. If `reference.ts` does not \r\nexist originally, it is created for you. \r\n\r\n```typescript\r\n\r\n/// <reference path=\"someBaseClass.ts\" />\r\n\r\n// You can even put comments here and they are preserved\r\n\r\n//grunt-start\r\n/// <reference path=\"autoreference.ts\" />\r\n/// <reference path=\"someOtherFile.ts\" />\r\n//grunt-end\r\n\r\n\r\n/// <reference path=\"main.ts\" />\r\n```\r\n\r\n####Javscript generation Redirect\r\nIf you specify `outDir` all output javascript are redirected to this folder.\r\nThis helps keep your source folder clean.\r\n\r\n####AMD / RequireJS support \r\nIf you specify both `outDir` and `amdloader` option a Javascript requireJS loader file is created using the information\r\navailable from `reference.ts`. The file consists of three sections. \r\n* The initial ordered section. \r\n* A middle order independent section loaded asynchronously. \r\n* And a final ordered section.\r\n\r\ne.g the following `reference` file\r\n\r\n```typescript\r\n/// <reference path=\"classa.ts\" />\r\n\r\n//grunt-start\r\n/// <reference path=\"deep/classb.ts\" />\r\n/// <reference path=\"deep/classc.ts\" />\r\n//grunt-end\r\n\r\n/// <reference path=\"deep/deeper/classd.ts\" />\r\n/// <reference path=\"app.ts\" />\r\n```\r\n\r\nCorresponds to an `amdloader` (edited for readability): \r\n\r\n```typescript\r\n// initial ordered files\r\ndefine(function (require) {\r\n  require([\"./classa\"],function () {\r\n    // grunt-ts start\r\n    require([\"./deep/classb\",                       \r\n             \"./deep/classc\"],function () {\r\n      // grunt-ts end\r\n      // final ordered files\r\n      require([\"./deep/deeper/classd\"],function () {  \r\n        require([\"./app\"],function () {\r\n          // final ordered file loaded\r\n        });\r\n      });\r\n    });\r\n  });\r\n});\r\n```\r\n\r\n#####Advantage of using amdloader option\r\nThe following combination of circumstances are why you would use it instead of Compiler supported AMD. \r\n\r\n* You want to use RequireJS since you prefer to debug \"js\" files instead of \"ts\" files. \r\nThis is useful in some cases and the most common way is using AMD\r\n* You want the ability to individually compile only changed files (for a faster dev-compile-run cycle)\r\n* However, File order doesn't matter to you, even when you have inter file depenendency (e.g. AngularJS runtime Dependency injection)\r\n\r\nIn such a case you can either create a `loader.js` manually or have grunt create it for you. \r\n\r\n**Further Explanation** If you use `export class Foo{}` at the root level of your file the only \r\nway to use the type information \r\nof Foo in another file is via an import statement `import foo = require('./potentially/long/path/to/Foo');` \r\nThe ordering implied by this isn't necessary when using a runtime Dependency injection framework like AngularJS.\r\n Having a loader gives you the js debugging (+ async) advantages\r\nof RequireJS without the overhead of constantly requesting via `import` to get the TypeScript type inference and \r\nworrying about file paths when they are not relevant. \r\n\r\nPS: your individual file SourceMaps will continue to work. So now you can debug individual \"JS\" or \"TS\" files :)\r\n\r\n\r\n###Html 2 TypeScript support \r\nCan re-encode html files into typescript and makes them available as a variable. e.g.\r\na file called `test.html` containing\r\n```html\r\n<div> Some Content </div>\r\n```\r\nis compiled to a typescript file `test.html.ts` containing: \r\n```typescript\r\nmodule test { export var html =  '<div> Some content </div>' } \r\n``` \r\nso that you can use use the variable `test.html` within your typescript to get the content of test.html \r\nas a string. The motivation is to remove http requests to load templates in various front end frameworks.\r\n\r\n####Html 2 TypeScript usage in AngularJS \r\nThis is great for putting variables in templateCache : http://docs.angularjs.org/api/ng.$templateCache \r\nor even using the html string directly by setting it to the `template` properties (directives/views) instead of `templateUrl`\r\n\r\n####Html 2 TypeScript usage in EmberJS\r\nYou can specify this string to the template on a view : http://emberjs.com/api/classes/Ember.View.html \r\nSpecifically: http://stackoverflow.com/a/9867375/390330\r\n\r\n###Live file watching and building\r\nCan watch a directory for you and recompile your typescript files when any typescript file changes, gets added, gets removed. \r\nThis makes sure your project is always build ready :) \r\n\r\n\r\nnpm install\r\n======================\r\n\r\nThe npm package is available here : https://npmjs.org/package/grunt-ts\r\n\r\n## Installation Documentation\r\nInstall nodejs. Then install grunt-cli using `npm install -g grunt-cli`. Next you can install `grunt` and `grunt-ts` by creating a `package.json`\r\nfile containing the following: \r\n\r\n```javascript\r\n{\r\n  \"devDependencies\": {\r\n    \"grunt\" : \"0.4.1\",\r\n    \"grunt-ts\" : \"latest\"\r\n  }\r\n}\r\n```\r\nand run `npm install` from the same directory. This will download both grunt and grunt-ts for you. \r\n\r\n## Configuration Documentation\r\nCreate a `Gruntfile.js`. Modify it to load grunt-ts by adding the following lines:\r\n\r\n    module.exports = function (grunt) {\r\n    \r\n        // load the task \r\n        grunt.loadNpmTasks(\"grunt-ts\");\r\n        \r\n        // Configure grunt here\r\n    }\r\n\r\nThen add some configuration for the plugin like so:\r\n\r\n    grunt.initConfig({\r\n        ...\r\n        ts: {\r\n            dev: {                                 // a particular target\r\n                src: [\"test/work/**/*.ts\"],        // The source typescript files, http://gruntjs.com/configuring-tasks#files\r\n                html: [\"test/work/**/*.tpl.html\"], // The source html files, https://github.com/basarat/grunt-ts#html-2-typescript-support\r\n                reference: \"./test/reference.ts\",  // If specified, generate this file that you can use for your reference management\r\n                out: 'test/out.js',                // If specified, generate an out.js file which is the merged js file\r\n                outDir: 'test/outputdirectory',    // If specified, the generate javascript files are placed here. Only works if out is not specified\r\n                watch: 'test',                     // If specified, watches this directory for changes, and re-runs the current target\r\n                options: {                         // use to override the default options, http://gruntjs.com/configuring-tasks#options\r\n                    target: 'es3',                 // 'es3' (default) | 'es5'\r\n                    module: 'commonjs',            // 'amd' (default) | 'commonjs'\r\n                    sourceMap: true,               // true (default) | false\r\n                    declaration: false,            // true | false (default)\r\n                    removeComments: true           // true (default) | false\r\n                },\r\n            },\r\n            build: {                               // another target\r\n                src: [\"test/work/**/*.ts\"],\r\n                options: {                         // override the main options for this target\r\n                    sourceMap: false,\r\n                }\r\n            },\r\n        },\r\n        ...\r\n    });\r\n\r\nI also recommend adding a default target you want to run in case you do not want to specify any arguments to grunt: \r\n```\r\ngrunt.registerTask(\"default\", [\"ts:dev\"]);\r\n```\r\n    \r\nYou can see/grab an up-to-date sample grunt file here: https://github.com/basarat/grunt-ts/blob/master/sample/Gruntfile.js\r\n   \r\n### Different configurations per target   \r\nConfiguration options are per target. You can see how you can have one set of default options and then override\r\nthese selectively for a target (e.g `build` , `dev`, `staging` etc).\r\nThis is provided by grunt : http://gruntjs.com/configuring-tasks#options\r\n\r\n### Awesome file globs\r\nYou can do pretty fancy stuff with your src file selection. \r\nAgain provided by grunt : http://gruntjs.com/configuring-tasks#files\r\n\r\n# Contributing\r\n\r\n## Building the project:\r\n\r\n    tsc \"./tasks/ts.ts\" --sourcemap --module commonjs\r\n\r\n## Running the tests:\r\n\r\nWith npm and grunt-cli installed, run the following from the root of the repository,\r\n\r\n    grunt ts\r\n\r\nSome tests expect failures and will be labelled.\r\n\r\nWe welcome new methods for writing automated tests that are a little less of a manual process.\r\n",
  "readmeFilename": "README.md",
  "_id": "grunt-ts@1.6.4",
  "dist": {
    "shasum": "e0861688b0a11debb06df64141e7bbedb808f6cf"
  },
  "_from": "grunt-ts@",
  "_resolved": "https://registry.npmjs.org/grunt-ts/-/grunt-ts-1.6.4.tgz"
}
